
TODO
---

need due init command to create a new json file if none exists
- due reschedule --id 1.0 'new deadline' / due res -i 1.0 'new deadline' (remember to store when this deadline was originally scheduled in deadline_changes attribute)

the following functions should modify the source json file in addition to the task objects
- due add --id 1.0 'task name' 'deadline' --repeat 'weekly:smtwtfs' --until 'date'
    - --repeat daily
    - --repeat weekly:smtwtfs
    - --repeat monthly
    - --repeat yearly
    * extra feature: accept cron job syntax here
    * extra feature: 'custom' monthly feature like "once every 2nd tuesday of the month"



 create a kind = root task and change all the task methods that test for root to use the self.kind attribute

find out how to set up virtual environment
- due ls --json (pipe out json to other applications)
- due ls --yaml (pipe out yaml to other applications)
- due ls --md (pipe out mardkown to other applications)

- due backup --yaml 'filename.yaml'
- due backup --json 'filename.json'

 figure out how to set the default file to search for to make the root task/task tree.
- argparse help menu setup

- due week +1 (due next week)
- due week -1 (due last week)
- due week 3 (due 3rd week of year)

TODO: is there a better way to work with the todo file filepaths and configurations files? Which file module should I use?


assert that deadlines of subtasks always be before or on the day of parent
tasks in the .add_subtask() method in the Task class.

look into the following links for testing and badges. I really want this project to be professional and maintainable.
https://www.freecodecamp.org/news/how-to-use-badges-to-stop-feeling-like-a-noob-d4e6600d37d2/
https://github.com/dwyl/repo-badges

* extra feature: use tree structure for tasks like this: https://stackoverflow.com/a/59109706/7215135
├── package
│   ├── __init__.py
│   ├── __main__.py
│   ├── subpackage
│   │   ├── __init__.py
│   │   ├── __main__.py
│   │   └── module.py
│   └── subpackage2
│       ├── __init__.py
│       ├── __main__.py
│       └── module2.py
└── package2
    └── __init__.py

* extra feature: add week number loading bar to the today, week, tomorrow display functions.
* extra feature: add loading bar for specific milestones to show how close until deadline

* extra feature: you could add a utility to gather # TODO's from code with
    lines of text, filenames, and project names which could be added to your milestone tasks
    you could assign deadlines to them later on

TODO: display an "error log" for each deferment as follows:
    list summary statistics for each category of deferment
    milestone_name
        deferments of TaskList
            deferment_date    task_name   from    to  category    justification
        deferments of subtasks
            deferment_date    task_name   from    to  category    justification

TODO: implement function to filter deferments by category

TODO: put type hints in all functions


Flashcards to make:
    using str.format() https://realpython.com/python-string-formatting/#2-new-style-string-formatting-strformat
    the difference between __str__ and __rep__ https://realpython.com/python-print/#printing-custom-data-types
    difference between static, class, and other method decorators in python classes https://realpython.com/instance-class-and-static-methods-demystified/
    how to use if-else conditionals in list comprehension: fil_subtasks = [s for s in fil_subtasks if s is not None]  https://stackoverflow.com/questions/4406389/if-else-in-a-list-comprehension
    difference between json.loads() and json.load(): https://stackoverflow.com/questions/39719689/what-is-the-difference-between-json-load-and-json-loads-functions
    how to load json data from and dump data to json files
    how to dump json to file: https://stackoverflow.com/a/12309296/7215135
    how to make a second constructor as I did with Task.from_json_file() and Task.from_dict(): https://www.geeksforgeeks.org/what-is-a-clean-pythonic-way-to-have-multiple-constructors-in-python/
    how you get today's date from datetime:     datetime.today().strftime('%Y-%m-%d')
    how to flatten a list in python: flattened_l = [item for sublist in l for item in sublist]
    read the following articles and make flashcards: https://pymotw.com/3/datetime/index.html  https://pymotw.com/3/time/index.html
    read through the argparse tutorial from the python docs it's very good: https://docs.python.org/3/howto/argparse.html
Examples for documentation
    # print(t.filter(lambda x: x.deadline == datetime.today().strftime('%Y-%m-%d')))
    print('↓search↓')
    print(t.search(lambda x: x.complete == True))
    
    print('↓promote↓')
    for s1 in t.subtasks:
        for s2 in s1.promote(lambda x: x.deadline <= '2021-03-18'):
            print(s2)
    


DONE
---
- due today / due td
- due tomorrow / due tm
- due week (due this week) show  the week number, this week's date range, and all tasks due for the week
- due add --id 1.0 'task name' 'deadline'
- due done --id 1.0 / due  --id 1.0
- due rm --id 1.0
- due (by itself, this should show everything due today, over your weekly todo list)
- due ls / due (list all tasks that are uncompleted)
it should be an option to print todo's
    without the deadline date (this should be the default for 'due today')
    with or without the task id's
    also task id's should be chained to make it easier to remove them by id.
